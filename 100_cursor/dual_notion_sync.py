#!/usr/bin/env python3
"""
2つのNotionアカウント統合同期スクリプト
"""
import os
import json
import requests
from datetime import datetime
import time
import re

# 設定
NOTION_ACCOUNTS = {
    "Main": {
        "token": "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",
        "output_dir": "/Users/hashiguchimasaki/project/obsidian/20_Literature/25_Notion/Main"
    },
    "Secondary": {
        "token": "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",
        "output_dir": "/Users/hashiguchimasaki/project/obsidian/20_Literature/25_Notion/Secondary"
    }
}

NOTION_VERSION = "2022-06-28"
BATCH_SIZE = 30  # API制限を考慮してさらに小さく

def get_headers(token):
    return {
        "Authorization": f"Bearer {token}",
        "Notion-Version": NOTION_VERSION,
        "Content-Type": "application/json"
    }

def sanitize_filename(filename):
    """ファイル名をサニタイズ"""
    filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
    return filename.strip()[:100] or "Untitled"

def get_page_title(page):
    """ページタイトルを取得"""
    try:
        if 'properties' in page:
            for prop_name, prop_value in page['properties'].items():
                if prop_value['type'] == 'title' and prop_value.get('title'):
                    return prop_value['title'][0]['plain_text']
    except:
        pass
    return "Untitled"

def create_placeholder_batch(account_name, token, output_dir, batch_size=50):
    """プレースホルダーバッチ作成"""
    print(f"\n🚀 Creating placeholders for {account_name} account")
    print("-" * 50)
    
    os.makedirs(output_dir, exist_ok=True)
    headers = get_headers(token)
    
    # 全ページIDを高速取得
    url = "https://api.notion.com/v1/search"
    payload = {
        "filter": {"property": "object", "value": "page"},
        "page_size": 100
    }
    
    all_pages = []
    has_more = True
    start_cursor = None
    
    while has_more:
        if start_cursor:
            payload["start_cursor"] = start_cursor
        
        response = requests.post(url, headers=headers, json=payload)
        if response.status_code == 200:
            data = response.json()
            batch_pages = data.get("results", [])
            all_pages.extend(batch_pages)
            has_more = data.get("has_more", False)
            start_cursor = data.get("next_cursor")
            
            if len(all_pages) % 100 == 0:
                print(f"  📥 Fetched {len(all_pages)} pages...")
        else:
            print(f"  ❌ Error: {response.status_code}")
            break
    
    print(f"  📊 Total pages to process: {len(all_pages)}")
    
    # プレースホルダー作成
    created = 0
    skipped = 0
    
    for i, page in enumerate(all_pages):
        page_id = page['id']
        title = get_page_title(page)
        
        # ファイル名作成
        filename = f"{sanitize_filename(title)}.md"
        filepath = os.path.join(output_dir, filename)
        
        # 既存チェック
        if os.path.exists(filepath):
            skipped += 1
            continue
        
        # プレースホルダー作成
        metadata = f"""---
notion_id: {page_id}
account: {account_name}
title: {title}
url: {page.get('url', '')}
created_time: {page.get('created_time', '')}
last_edited_time: {page.get('last_edited_time', '')}
sync_status: placeholder
sync_time: {datetime.now().isoformat()}
---

# {title}

*🔄 This is a placeholder file from Notion {account_name} account.*

**Original URL**: {page.get('url', '')}

**Status**: Content will be synced in a future update.

**Page ID**: `{page_id}`

---

*Generated by Obsidian-Notion sync at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
"""
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(metadata)
            created += 1
            
            if (i + 1) % 50 == 0:
                print(f"  ✅ Progress: {i + 1}/{len(all_pages)} ({((i+1)/len(all_pages)*100):.1f}%)")
                
        except Exception as e:
            print(f"  ❌ Error creating {filename}: {str(e)}")
    
    # 統計情報保存
    stats = {
        "account": account_name,
        "total_pages": len(all_pages),
        "placeholders_created": created,
        "skipped_existing": skipped,
        "sync_time": datetime.now().isoformat(),
        "status": "placeholders_created"
    }
    
    with open(os.path.join(output_dir, ".sync_stats.json"), 'w') as f:
        json.dump(stats, f, indent=2)
    
    return stats

def main():
    """メイン処理"""
    print("🔄 Dual Notion Account Sync - Placeholder Creation")
    print("=" * 60)
    
    all_stats = {}
    total_pages = 0
    total_created = 0
    
    for account_name, config in NOTION_ACCOUNTS.items():
        start_time = time.time()
        
        stats = create_placeholder_batch(
            account_name, 
            config["token"], 
            config["output_dir"]
        )
        
        end_time = time.time()
        elapsed = end_time - start_time
        
        all_stats[account_name] = stats
        total_pages += stats["total_pages"]
        total_created += stats["placeholders_created"]
        
        print(f"\n📊 {account_name} Account Summary:")
        print(f"   📄 Total pages: {stats['total_pages']}")
        print(f"   ✅ Created: {stats['placeholders_created']}")
        print(f"   ⏭️  Skipped: {stats['skipped_existing']}")
        print(f"   ⏱️  Time: {elapsed:.1f} seconds")
        print(f"   📂 Output: {config['output_dir']}")
    
    # 全体サマリー
    print("\n" + "=" * 60)
    print("🎉 DUAL SYNC SUMMARY")
    print("=" * 60)
    print(f"📊 Total pages across accounts: {total_pages}")
    print(f"✅ Total placeholders created: {total_created}")
    print(f"📁 Output structure:")
    for account_name, config in NOTION_ACCOUNTS.items():
        print(f"   📂 {account_name}: {config['output_dir']}")
    
    # 全体統計保存
    overall_stats = {
        "total_pages": total_pages,
        "total_created": total_created,
        "accounts": all_stats,
        "sync_time": datetime.now().isoformat()
    }
    
    base_dir = "/Users/hashiguchimasaki/project/obsidian/20_Literature/25_Notion"
    with open(os.path.join(base_dir, "dual_sync_summary.json"), 'w') as f:
        json.dump(overall_stats, f, indent=2)
    
    print(f"\n💾 Summary saved to: {base_dir}/dual_sync_summary.json")
    
    # 次のステップの提案
    print(f"\n🎯 NEXT STEPS:")
    print("1. Review created placeholder files in Obsidian")
    print("2. Identify priority pages for full content sync") 
    print("3. Run content sync for specific pages/folders")
    print("4. Set up automated incremental sync")

if __name__ == "__main__":
    main()